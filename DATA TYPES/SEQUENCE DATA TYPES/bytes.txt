	====================================================
							2. bytes
			====================================================
Properties 
------------------
=>'bytes' is one of the pre-defined class name and treated as Sequence Data Type.
=>The purpose of bytes data type is that "To organize the Numerical Integer values ranges from (0,256) for the implementation of End-to-End Encryption".
=>bytes data type does not contains any symbolic notations for organizing (0,256) data. But we can convert any type of Value(s) into bytes type by using bytes()
=>Syntax:   varname=bytes(object)
=>An object of bytes belongs to immutable bcoz bytes object does not support Item Assignment.
=>On the object of bytes, we can perform both Indexing and Slicing Operations.
=>An object of bytes maintains Insertion Order (Which is nothing but, whatever the order we insert the data, In the same order data will be displayed).
-------------------------------------------------------------------------------------------------------------------------------------------
Examples
-------------------------------------------------------------------------------------------------------------------------------------------
>>> lst=[10,34,56,100,256,0,102]
>>> print(lst,type(lst))----------------------[10, 34, 56, 100, 256, 0, 102] <class 'list'>
>>> b=bytes(lst)----------------------------ValueError: bytes must be in range(0, 256)
>>> lst=[10,-34,56,100,255,0,102]
>>> print(lst,type(lst))-------------------[10, -34, 56, 100, 255, 0, 102] <class 'list'>
>>> b=bytes(lst)--------------------------ValueError: bytes must be in range(0, 256)
>>> lst=[10,34,56,100,255,0,102]
>>> print(lst,type(lst))-------------------[10, 34, 56, 100, 255, 0, 102] <class 'list'>
>>> b=bytes(lst)
>>> print(b,type(b))---------------------b'\n"8d\xff\x00f' <class 'bytes'>
>>> for val in b:
...		print(val)
...
				10
				34
				56
				100
				255
				0
				102

>>> print(b,type(b))----------------b'\n"8d\xff\x00f' <class 'bytes'>
>>> print(b[0])--------------------10
>>> print(b[-1])-------------------102
>>> print(b[0:4])---------------  b'\n"8d'
>>> for val in b[0:4]:
...		print(val)
...
				10
				34
				56
				100
>>> b[0]----------------------------10
>>> b[0]=123---------------TypeError: 'bytes' object does not support item assignment
==============================x===============================================












			